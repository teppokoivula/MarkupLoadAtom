<?php

/**
 * ProcessWire Atom Loader
 * =======================
 *
 * Given an Atom feed URL, this module will pull it, and let you foreach() it 
 * or render it. This module will also cache feeds that you retrieve with it.
 * 
 * 
 * More Details
 * ------------
 *
 * This module loads the given Atom feed and all data from it. It then populates 
 * that data into a WireArray of Page-like objects. All of the fields in the Atom 
 * feed are accessible, so you use whatever the feed provides.
 *
 * The most common and expected field names in the Atom entry array are: 
 *
 * $atom->id
 * $atom->title
 * $atom->updated
 * $atom->published           (or $atom->date)
 * $atom->subtitle            (or $atom->body)
 * $atom->link                (or $atom->url)
 * $atom->created             (unix timestamp of published)
 *
 * The most common and expected field names for each Atom item are:
 *
 * $item->id
 * $item->title
 * $item->updated
 * $item->published          (or $item->date)
 * $item->content            (or $item->body)
 * $item->link               (or $item->url)
 * $item->created            (unix timestamp of published)
 *
 * For convenience and consistency, ProcessWire translates some common Atom 
 * fields to the PW-equivalent naming style. You can choose to use either the 
 * ProcessWire-style name or the traditional Atom name, as shown above.
 *
 *
 * Example #1: Cycling through a feed
 * ----------------------------------
 * 
 * $atom = $modules->get("MarkupLoadAtom"); 
 * $atom->load("https://github.com/ryancramerdesign/ProcessWire/commits/master.atom");
 * 
 * foreach($atom as $item) { 
 * 	echo "<p>";
 *	echo "<a href='{$item->url}'>{$item->title}</a> ";
 *	echo $item->date . "<br /> ";
 *	echo $item->body; 
 * 	echo "</p>";
 * }
 * 
 *
 * Example #2: Using the predefined rendering
 * ------------------------------------------
 * 
 * $atom = $modules->get("MarkupLoadAtom"); 
 * echo $atom->render("https://github.com/ryancramerdesign/ProcessWire/commits/master.atom");
 *
 *
 * Example #3: Specifying options and using entry array titles
 * -----------------------------------------------------------
 *
 * $atom = $modules->get("MarkupLoadAtom"); 
 * $atom->limit = 5; 
 * $atom->cache = 0; 
 * $atom->maxLength = 255; 
 * $atom->dateFormat = 'm/d/Y H:i:s';
 * $atom->load("https://github.com/ryancramerdesign/ProcessWire/commits/master.atom");
 *
 * echo "<h2>{$atom->title}</h2>";
 * echo "<p>{$atom->subtitle}</p>"; 
 * echo "<ul>"; 
 * 
 * foreach($atom as $item) {
 * 	echo "<li>" . $item->title . "</li>";
 * }
 * echo "</ul>";
 * 
 * 
 *
 * Options: 
 * --------
 * 
 * Options should be set before calling load() or render(). 
 *
 * // specify that you want to load up to 3 items (default = 10)
 * $atom->limit = 3; 		
 * 
 * // set the feed to cache for an hour (default = 120 seconds)
 * // if you want to disable the cache, set it to 0. 
 * $atom->cache = 3600;		
 *
 * // set the max length of any field, i.e. subtitle (default = 2048)
 * // field values longer than this will be truncated
 * $atom->maxLength = 255; 
 *
 * // tell it to strip out any HTML tags (default = true)
 * $atom->stripTags = true;
 *
 * // tell it to encode any entities in the feed (default = true); 
 * $atom->encodeEntities = true; 
 *
 * // set the date format used for output (use PHP date string)
 * $atom->dateFormat = "Y-m-d g:i a";
 *
 * See the $options array in the class for more options, as well as 
 * all the markup customization options or when using render().
 *
 * 
 * Handling Errors 
 * ---------------
 * 
 * If an error occurred when loading the feed, the $atom object will 
 * have 0 items in it: 
 * 
 * $atom->load("..."); 
 * if(!count($atom)) { error } 
 *
 * In addition, the $atom->error property always contains a detailed
 * description of what error occurred: 
 *
 * if($atom->error) { echo "<p>{$atom->error}</p>"; } 
 *
 * I recommend only checking for or reporting errors when you are 
 * developing and testing. On production sites you should skip 
 * error checking/testing, as blank output is a clear indication
 * of an error. This module will not throw runtime exceptions so 
 * if an error occurs, it's not going to halt the site. 
 *
 *
 * 
 *
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class MarkupLoadAtom extends WireData implements Module, IteratorAggregate, Countable {

	public static function getModuleInfo() {
		return array(
			'title' => 'Load an Atom feed', 
			'summary' => 'Given an Atom feed URL, this module will pull it, cache it, and let you foreach() it or render it.', 
			'version' => 100, 
			'permanent' => false, 
			'singular' => false, 
			'autoload' => false, 
			);
	}

	/**
	 * Configurable options provided by this module
	 *
	 */
	protected $options = array(

		'limit' => 10, 				// Max number of items to load from the feed (default: 10)
		'cache' => 120, 			// Number of seconds to cache, or 0 to skip caching (default = 2 minutes)
		'maxLength' => 2048,			// The max number of characters allowed in any text from the feed (typically to truncate the subtitle)
		'stripTags' => true, 			// Strip any markup tags that appear in the feed? (default: true)
		'encodeEntities' => true, 		// Whether to automatically decode and re-encode the entities for all fields (default: true)
		'dateFormat' => "F j, Y, g:i a",	// Default date format to use when rendering the feed's output 

		// when stripTags is on, it will first replace perform these case insensitive replacements: 
		'replacements' => array(		
			'<br />' => ' ',
			'<br>' => ' ',
			'</p>' => ' ',
			"\n" => ' ',
			"\r" => ' ',
		),

		// markup customization for when using render():
		'listOpen' => "\n<ul class='MarkupLoadAtom'>",
		'listClose' => "\n</ul>",
		'itemOpen' => "\n\t<li>",
		'itemClose' => "\n\t</li>",
		'itemLinkOpen' => "\n\t\t<a href='{href}'>", 
		'itemLinkClose' => "</a>", 
		'itemDateOpen' => " \n\t\t<time datetime='{datetime}'>", 
		'itemDateClose' => "</time>", 
		'itemContentOpen' => "\n\t\t<div>", 
		'itemContentClose' => "</div>",
		); 

	/**
	 * Information about Atom entries, populated after load()
	 *
	 */
	protected $entries = array(
        'id' => '',
		'title' => '',
		'subtitle' => '', 
		'link' => '',
		'updated' => '', 
        'published' => '',
		'created' => 0, // same as published but as a unix timestamp
		); 

	/**
	 * Items in the Atom feed, after they are loaded
	 *
	 */
	protected $items = null;

	/**
	 * Path where the XML cache file is stored
	 *
	 */
	protected $cachePath; 

	/**
	 * Last error that occurred
	 *
	 */
	protected $error = '';

	public function __construct() {
		$this->cachePath = $this->config->paths->cache . $this->className() . '/';
	}

	/**
	 * Define the cache path
	 *
	 * Should be done here in the construct rather than the init() because init() is not called on install/uninstall
	 *
	 */
	public function init() {
		$this->items = new WireArray();
		$this->multibyteSupport = function_exists("mb_strlen"); 
	}

	/**
	 * Set a configuration option
	 *
	 * @param string $key Option name
	 * @param string|int $value Option value
	 * @return this
	 *
	 */
	public function set($key, $value) {
		if($key == 'options' && is_array($value)) $this->options = array_merge($this->options, $value); 
			else if(array_key_exists($key, $this->options)) $this->options[$key] = $value; 
			else return parent::set($key, $value); 

		return $this;
	}

	/**
	 * Gets a config option or $entries info
	 *
	 */
	public function get($key) {
		if($key == 'error') return $this->error; 

		//  translate common PW-style names to what they would be in the feed
		if($key == 'url') $key == 'link';
			else if($key == 'date') $key = 'updated';
			else if($key == 'body') $key = 'subtitle';

		if(array_key_exists($key, $this->entries)) return $this->entries[$key]; 
		if(array_key_exists($key, $this->options)) return $this->options[$key];

		return parent::get($key);
	}

	/**
	 * Cleans text string from a feed before storage in our object
	 *
	 */
	protected function cleanText($value) {

		if($this->options['stripTags']) {
			if(count($this->options['replacements'])) { 
				$value = str_ireplace(array_keys($this->options['replacements']), array_values($this->options['replacements']), $value); 
			}
			$value = trim(strip_tags($value)); 
		}

                if($this->multibyteSupport) {
                        if(mb_strlen($value, "UTF-8") > $this->options['maxLength']) {
				$value = mb_substr($value, 0, $this->options['maxLength'], "UTF-8");
			}

                } else {
                        if(strlen($value) > $this->options['maxLength']) {
				$value = substr($value, 0, $this->options['maxLength']);
			}
                }

		if($this->options['encodeEntities']) {
			$value = html_entity_decode($value, ENT_QUOTES, "UTF-8"); 
			$value = htmlentities($value, ENT_QUOTES, "UTF-8"); 
		}

		return $value; 
	}

	/**
	 * Load an Atom feed from the given URL
	 *
	 * @param string $url Full URL to Atom feed (including http://)
	 * @return this
	 *
	 */
	public function load($url) {

		$this->items = new WireArray();
		$xmlData = $this->loadXmlData($url); 
		$atom = simplexml_load_string($xmlData);

		if(!$atom) {
			$msg = "Unable to load Atom feed at " . htmlentities($url) . ": \n";
			foreach(libxml_get_errors() as $error) $msg .= $error . " \n";
			$this->error($msg); 
			return $this;
		}

		$this->entries['title'] = $this->cleanText((string) $atom->entry->title);
		$this->entries['subtitle'] = $this->cleanText((string) $atom->entry->subtitle);
		$this->entries['link'] = $this->cleanText((string) $atom->entry->link);
		$this->entries['updated'] = date($this->options['dateFormat'], $this->entry['updated']);
        $this->entries['created'] = strtotime((string) $atom->entry->published);
		$this->entries['published'] = date($this->options['dateFormat'], $this->entry['created']); 

		$n = 0;

		foreach($atom->entry as $item) {

			$a = new MarkupLoadAtomItem();

			foreach($item as $key => $value) {

				$value = (string) $value; 

				if($key == 'published') {
					$value = strtotime($value); 
					$a->set('created', $value); 
					$value = date($this->options['dateFormat'], $value); 

                } else if($key == 'updated') {
                    $value = date($this->options['dateFormat'], strtotime($value));

                } else if($key == 'link') {
                    $value = $this->cleanText($item->link->attributes()->href);

				} else { 
					$value = $this->cleanText($value);
				}

				$a->set($key, $value);
			}

			$this->items->add($a); 

			if(++$n >= $this->options['limit']) break;
		}

		return $this; 
	}


	/**
	 * Load XML data from either the Atom URL or the cache file
	 *
	 */
	protected function loadXmlData($url) {

		$cacheFile = $this->cachePath . md5($url) . '.xml.cache';

                if(!is_file($cacheFile) || time() - filemtime($cacheFile) > $this->options['cache']) {

                        $xmlData = @file_get_contents($url); 

			if($xmlData === false) {
				$this->error("Unable to load " . htmlentities($url));
				return false;

			} else if($this->options['cache']) {
				@file_put_contents($cacheFile, $xmlData, LOCK_EX);
			}

                } else {

			$xmlData = file_get_contents($cacheFile); 
			if($xmlData === false) {
				$this->error("Unable to load XML data cache");
				return false;
			}
		}

		return $xmlData; 	
	}

	/**
	 * Render the markup for data retrieved from the Atom feed
	 *
	 */
	public function render($url = '') {
		if($url) $this->load($url); 
		$out = $this->options['listOpen']; 
		foreach($this as $item) {
			$out .= $this->renderItem($item); 
		}
		$out .= $this->options['listClose']; 
		return $out; 
	}

	/**
	 * Render a single item, as used by the render() method
	 *
	 */
	protected function renderItem($item) {

		$out = 	$this->options['itemOpen'] . 
			str_replace('{href}', $item->link, $this->options['itemLinkOpen']) . 
			htmlentities($item->title, ENT_QUOTES, "UTF-8") . 	
			$this->options['itemLinkClose'] . 
			str_replace('{datetime}', date('c', $item->created), $this->options['itemDateOpen']) . date($this->options['dateFormat'], $item->created) . $this->options['itemDateClose'] . 
			$this->options['itemContentOpen'] . $item->content . $this->options['itemContentClose'] . 
			$this->options['itemClose']; 

		return $out; 
	}

	/**
	 * Make this class iterable
	 *
	 */
	public function getIterator() {
		return $this->items; 		
	}

	/**
	 * Make this class countable
	 *
	 */
	public function count() {
		return count($this->items); 
	}

	/**
	 * Create a directory where we will store our cache files
	 *
	 */
	public function ___install() {

		if(ini_get('allow_url_fopen') == "0") {
			throw new WireException("Cannot install '{$this->className}' because it requires PHP's 'allow_url_fopen' which is disabled on your server."); 
		}

		$path = $this->cachePath; 
		if(!is_dir($path)) {
			if(!mkdir($path)) throw new WireException("Unable to create directory: $path"); 
			if($this->config->chmodDir) chmod($path, octdec($this->config->chmodDir));
		}
	}

	/**
	 * Remove cache files and directory
	 *
	 */
	public function ___uninstall() {
		$dir = new DirectoryIterator($this->cachePath); 
		foreach($dir as $file) {
			if($file->isDir() || $file->isDot()) continue;
			if($file->isFile() && preg_match('/\.xml.cache$/', $file->getFilename())) unlink($file->getPathname());
		}
		rmdir($this->cachePath); 
	}

	/**
	 * Save the error message and send it on to PW
	 *
	 */
	public function error($text, $flags = 0) {
		$this->error = $text; 		
		return parent::error($text, $flags); 
	}


}

/**
 * Class to store data for an individual Atom item
 *
 */
class MarkupLoadAtomItem extends WireData { 

	/**
	 * Translate common PW-Page style var names to Atom feed names, for consistency/convenience
	 *
	 */
	public function get($key) {
		if($key == 'url') $key = 'link';
			else if($key == 'date') $key = 'published';
			else if($key == 'body') $key = 'content'; 

		return parent::get($key); 
	}

}



